extension {{ structPrepared.name }} {
    class {{ mutationStruct.mutation.name }}{% if mutationStruct.mutation.referencedFragment %}<V: Fragment>{% endif %}: Mutation, ObservableObject{% if mutationStruct.mutation.referencedFragment %} where V.UnderlyingType == {{ swiftUnderlyingType }}{% endif %} {

        {% if mutationStruct.mutation.referencedFragment %}
        typealias Value = V
        {% else %}
        typealias Value = {{ swiftType }}
        {% endif %}

        @Published private var mutationCounter = 0

        private let api: {{ mutationStruct.mutation.api.name|upperCamelized }}

        var isLoading: Bool {
            return mutationCounter > 0
        }
        
        init(api: {{ mutationStruct.mutation.api.name|upperCamelized }}) {
            self.api = api
        }
    }
}

{% if mutationStruct.mutation.referencedFragment %}
extension {{ structPrepared.name }}.{{ mutationStruct.mutation.name }} where V == {{ swiftType }} {
{% else %}
extension {{ structPrepared.name }}.{{ mutationStruct.mutation.name }} {
{% endif %}

    @discardableResult
    func commit({{ queryRendererArguments|codeArray|join:", " }}, completion: ((Result<Value, Error>) -> Void)? = nil) -> Self {
        mutationCounter += 1
        api.client.perform(mutation: Apollo{{ mutationStruct.mutation.api.name|upperCamelized }}.{{ mutationStruct.mutation.parentName }}{{ mutationStruct.mutation.name }}Mutation({{ queryArgumentAssignments|codeArray|join:", " }})) { result in
            self.mutationCounter -= 1
            switch result {
            case let .success(response):
                guard let data = response.data else { return }
                completion?(.success({{ expression }}))
            case let .failure(error):
                completion?(.failure(error))
            }
        }
        return self
    }

}
