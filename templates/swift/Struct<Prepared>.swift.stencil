// MARK: - {{ structPrepared.name }}

#if {{ unifiedMacroFlag }}
{% for fragment in fragments %}
extension Apollo{{ fragment.api.name|upperCamelized }}.{{ fragment.name|upperCamelized }} : Fragment {
    typealias UnderlyingType = {{ fragment.api.name|upperCamelized }}.{{ fragment.target.name|upperCamelized }}
}
{% endfor %}

extension {{ structPrepared.name }} {
    {% for fragment in fragments %}
    typealias {{ fragment.target.name|upperCamelized }} = Apollo{{ fragment.api.name|upperCamelized }}.{{ fragment.name|upperCamelized }}
    {% endfor %}
    {% if query %}
    typealias Data = Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query.Data
    {% endif %}
    
    init({{ initializerArguments|codeArray|join:", " }}) {
        self.init({{ initializerValueAssignments|codeArray|join:", " }})
    }

    {% if isSwiftUIView %}
    @ViewBuilder
    static func placeholderView({{ placeHolderInitializerArguments|codeArray|join:", " }}) -> some View {
        if #available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *) {
            Self({{ placeholderInitializerValueAssignments|codeArray|join:", " }}).disabled(true).redacted(reason: .placeholder)
        } else {
            BasicLoadingView()
        }
    }
    {% endif %}
}
{% if singleFragment %}
extension {{ structPrepared.name }} : Fragment {
    typealias UnderlyingType = {{ singleFragment.api.name|upperCamelized }}.{{ singleFragment.target.name|upperCamelized }}

    static let placeholder = Self({{ placeholderInitializerValueAssignments|codeArray|join:", " }})
}

extension Apollo{{ singleFragment.api.name|upperCamelized }}.{{ singleFragment.name|upperCamelized }} {
    
    func referencedSingleFragmentStruct() -> {{ structPrepared.name }} {
        return {{ structPrepared.name }}({{ singleFragment.target.name|camelized }}: self)
    }
    
}
{% endif %}

{% if query %}
extension {{ query.api.name|upperCamelized }} {
    
    {% if isSwiftUIView %}
    func {{ functionName }}<Loading : View, Error: View>({{ queryRendererArguments|codeArray|join:", " }}{% if queryRendererArguments %},{% endif %}
        @ViewBuilder loading: () -> Loading,
        @ViewBuilder error: @escaping (QueryError) -> Error) -> some View {
        return QueryRenderer(client: client,
                             query: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }}),
                             loading: loading(),
                             error: error) { (data: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query.Data) -> {{ structPrepared.name }} in
        
            {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }})
        }
    }

    func {{ functionName }}<Loading : View>({{ queryRendererArguments|codeArray|join:", " }}{% if queryRendererArguments %},{% endif %}
        @ViewBuilder loading: () -> Loading) -> some View {
        return QueryRenderer(client: client,
                             query: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }}),
                             loading: loading(),
                             error: { BasicErrorView(error: $0) }) { (data: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query.Data) -> {{ structPrepared.name }} in

            {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }})
        }
    }

    func {{ functionName }}<Error : View>({{ queryRendererArguments|codeArray|join:", " }}{% if queryRendererArguments %},{% endif %}
        @ViewBuilder error: @escaping (QueryError) -> Error) -> some View {
        return QueryRenderer(client: client,
                             query: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }}),
                             loading: {{ structPrepared.name }}.placeholderView({{ placeholderInitializerArgumentAssignmentFromQuery|codeArray|join:", " }}),
                             error: error) { (data: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query.Data) -> {{ structPrepared.name }} in

            {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }})
        }
    }

    func {{ functionName }}({{ queryRendererArguments|codeArray|join:", " }}) -> some View {
        return QueryRenderer(client: client,
                             query: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }}),
                             loading: {{ structPrepared.name }}.placeholderView({{ placeholderInitializerArgumentAssignmentFromQuery|codeArray|join:", " }}),
                             error: { BasicErrorView(error: $0) }) { (data: Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query.Data) -> {{ structPrepared.name }} in

            {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }})
        }
    }
    {% else %}
    func {{ functionName }}({{ queryRendererArguments|codeArray|join:", " }}{% if queryRendererArguments %}, {% endif %}completion: @escaping (Result<{{ structPrepared.name }}, GraphQLLoadingError<{{ query.api.name|upperCamelized }}>>) -> Void) {
        let query = Apollo{{ query.api.name|upperCamelized }}.{{ structPrepared.name }}Query({{ queryArgumentAssignments|codeArray|join:", " }})
        fetch(query: query) { result in
            completion(result.map { data in {{ structPrepared.name }}({{ initializerArgumentAssignmentFromQueryData|codeArray|join:", " }}) })
        }
    }
    {% endif %}
    
}
{% endif %}

{{ queryDataPlaceholders|code }}
{{ fragmentPlaceholders|code }}
{{ mutationStructs|code }}
{{ missingFragmentsStructs|code }}
{{ missingReferencedFragments|code }}
#endif
