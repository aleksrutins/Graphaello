{% if shouldBeTypealias %}
typealias {{ graphQlType.name|upperCamelized }} = Apollo{{ api.name|upperCamelized }}.{{ graphQlType.name }}
{% else %}
{% if graphQlType.inputFields %}struct{% else %}enum{% endif %} {{ graphQlType.name|upperCamelized }}: {%if hasEnumValues %}String, {% endif %}Target{% if connectionNodeType %}, Connection{% endif %} {

    {% if connectionNodeType %}typealias Node = {{ connectionNodeType }}{% endif %}
    typealias Path<V> = GraphQLPath<{{ graphQlType.name|upperCamelized }}, V>
    typealias FragmentPath<V> = GraphQLFragmentPath<{{ graphQlType.name|upperCamelized }}, V>

    {% if needsInitializer %}
    init({{ inputFieldInitializerArguments|codeArray|join:", " }}) {
        // no-op
    }
    {% endif %}

    {% for value in graphQlType.enumValues %}
    case {{ value.name|camelized|keywordProtected }} = "{{ value.name }}"
    {% endfor %}
    {{ graphQlType.fields|code:"static" }}

    {% for interface in graphQlType.interfaces %}
    static var {{ interface.name|camelized|keywordProtected }}: FragmentPath<{{ interface.name|upperCamelized }}> { .init() }
    {% endfor %}

    {% for possibleType in graphQlType.possibleTypes %}
    static var {{ possibleType.name|camelized|keywordProtected }}: FragmentPath<{{ possibleType.name|upperCamelized }}?> { .init() }
    {% endfor %}
    
    static var _fragment: FragmentPath<{{ graphQlType.name|upperCamelized }}> { .init() }
}
{% endif %}
